// # Rust
// Generated by Cargo
// will have compiled files and executables
(?d)debug/
(?d)target/

// These are backup files generated by rustfmt
(?d)**/*.rs.bk

// MSVC Windows builds of rustc generate these, which store debugging information
(?d)*.pdb

// # JS or TS
// Logs
(?d)logs
(?d)*.log
(?d)npm-debug.log*
(?d)yarn-debug.log*
(?d)yarn-error.log*
(?d)lerna-debug.log*
(?d).pnpm-debug.log*

// Diagnostic reports (https://nodejs.org/api/report.html)
(?d)report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

// Runtime data
(?d)pids
(?d)*.pid
(?d)*.seed
(?d)*.pid.lock

// Directory for instrumented libs generated by jscoverage/JSCover
(?d)lib-cov

// Coverage directory used by tools like istanbul
(?d)coverage
(?d)*.lcov

// nyc test coverage
(?d).nyc_output

// Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
(?d).grunt

// Bower dependency directory (https://bower.io/)
(?d)bower_components

// node-waf configuration
(?d).lock-wscript

// Compiled binary addons (https://nodejs.org/api/addons.html)
(?d)build/Release

// Dependency directories
(?d)node_modules/
(?d)jspm_packages/

// Snowpack dependency directory (https://snowpack.dev/)
(?d)web_modules/

// TypeScript cache
(?d)*.tsbuildinfo

// Optional npm cache directory
(?d).npm

// Optional eslint cache
(?d).eslintcache

// Optional stylelint cache
(?d).stylelintcache

// Microbundle cache
(?d).rpt2_cache/
(?d).rts2_cache_cjs/
(?d).rts2_cache_es/
(?d).rts2_cache_umd/

// Optional REPL history
(?d).node_repl_history

// Output of 'npm pack'
(?d)*.tgz

// Yarn Integrity file
(?d).yarn-integrity

// dotenv environment variable files
(?d).env
(?d).env.development.local
(?d).env.test.local
(?d).env.production.local
(?d).env.local

// parcel-bundler cache (https://parceljs.org/)
(?d).cache
(?d).parcel-cache

// Next.js build output
(?d).next
(?d)out

// Nuxt.js build / generate output
(?d).nuxt
(?d)dist

// Gatsby files
(?d).cache/
// Comment in the public line in if your project uses Gatsby and not Next.js
// https://nextjs.org/blog/next-9-1#public-directory-support
// public

// vuepress build output
(?d).vuepress/dist

// vuepress v2.x temp and cache directory
(?d).temp
(?d).cache

// Docusaurus cache and generated files
(?d).docusaurus

// Serverless directories
(?d).serverless/

// FuseBox cache
(?d).fusebox/

// DynamoDB Local files
(?d).dynamodb/

// TernJS port file
(?d).tern-port

// Stores VSCode versions used for testing VSCode extensions
(?d).vscode-test

# yarn v2
(?d).yarn/cache
(?d).yarn/unplugged
(?d).yarn/build-state.yml
(?d).yarn/install-state.gz
(?d).pnp.*

// # Python
// Byte-compiled / optimized / DLL files
(?d)__pycache__/
(?d)*.py[cod]
(?d)*$py.class

// C extensions
*.so

// Distribution / packaging
(?d).Python
(?d)build/
(?d)develop-eggs/
(?d)dist/
(?d)downloads/
(?d)eggs/
(?d).eggs/
(?d)lib/
(?d)lib64/
(?d)parts/
(?d)sdist/
(?d)var/
(?d)wheels/
(?d)share/python-wheels/
(?d)*.egg-info/
(?d).installed.cfg
(?d)*.egg
(?d)MANIFEST

// PyInstaller
//  Usually these files are written by a python script from a template
//  before PyInstaller builds the exe, so as to inject date/other infos into it.
(?d)*.manifest
(?d)*.spec

// Installer logs
(?d)pip-log.txt
(?d)pip-delete-this-directory.txt

// Unit test / coverage reports
(?d)htmlcov/
(?d).tox/
(?d).nox/
(?d).coverage
(?d).coverage.*
(?d).cache
(?d)nosetests.xml
(?d)coverage.xml
(?d)*.cover
(?d)*.py,cover
(?d).hypothesis/
(?d).pytest_cache/
(?d)cover/

// Translations
(?d)*.mo
(?d)*.pot

// Django stuff:
(?d)*.log
(?d)local_settings.py
(?d)db.sqlite3
(?d)db.sqlite3-journal

// Flask stuff:
(?d).webassets-cache

// Scrapy stuff:
(?d).scrapy

// Sphinx documentation
(?d)docs/_build/

// PyBuilder
(?d).pybuilder/
(?d)target/

// Jupyter Notebook
(?d).ipynb_checkpoints

// IPython
(?d)profile_default/
(?d)ipython_config.py

// pyenv
//   For a library or package, you might want to ignore these files since the code is
//   intended to run in multiple environments; otherwise, check them in:
(?d).python-version

// pipenv
//   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
//   However, in case of collaboration, if having platform-specific dependencies or dependencies
//   having no cross-platform support, pipenv may install dependencies that don't work, or not
//   install all needed dependencies.
//Pipfile.lock

// poetry
//   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
//   This is especially recommended for binary packages to ensure reproducibility, and is more
//   commonly ignored for libraries.
//   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
(?d)poetry.lock

// pdm
//   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
//pdm.lock
//   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
//   in version control.
//   https://pdm.fming.dev/#use-with-ide
(?d).pdm.toml

// PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
(?d)__pypackages__/

// Celery stuff
(?d)celerybeat-schedule
(?d)celerybeat.pid

// SageMath parsed files
(?d)*.sage.py

// Environments
(?d).env
(?d).venv
(?d)env/
(?d)venv/
(?d)ENV/
(?d)env.bak/
(?d)venv.bak/

// Spyder project settings
(?d).spyderproject
(?d).spyproject

// Rope project settings
(?d).ropeproject

// mypy
(?d).mypy_cache/
(?d).dmypy.json
(?d)dmypy.json

// Pyre type checker
(?d).pyre/

// pytype static type analyzer
(?d).pytype/

// Cython debug symbols
(?d)cython_debug/

// PyCharm
//  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
//  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
//  and can be added to the global gitignore or merged into this file.  For a more nuclear
//  option (not recommended) you can uncomment the following to ignore the entire idea folder.
(?d).idea/

// # C#
// Ignore Visual Studio temporary files, build results, and
// files generated by popular Visual Studio add-ons.

// User-specific files
(?d)*.suo
(?d)*.user
(?d)*.sln.docstates

// Build results

(?d)[Dd]ebug/
(?d)[Rr]elease/
(?d)x64/
(?d)[Bb]in/
(?d)[Oo]bj/

// MSTest test Results
(?d)[Tt]est[Rr]esult*/
(?d)[Bb]uild[Ll]og.*

(?d)*_i.c
(?d)*_p.c
(?d)*_i.h
(?d)*.ilk
(?d)*.meta
(?d)*.obj
(?d)*.pch
(?d)*.pdb
(?d)*.pgc
(?d)*.pgd
(?d)*.rsp
(?d)*.sbr
(?d)*.tlb
(?d)*.tli
(?d)*.tlh
(?d)*.tmp
(?d)*.tmp_proj
(?d)*.log
(?d)*.vspscc
(?d)*.vssscc
(?d).builds
(?d)*.pidb
(?d)*.log
(?d)*.svclog
(?d)*.scc

// Visual C++ cache files
(?d)ipch/
(?d)*.aps
(?d)*.ncb
(?d)*.opensdf
(?d)*.sdf
(?d)*.cachefile

// Visual Studio profiler
(?d)*.psess
(?d)*.vsp
(?d)*.vspx

// Guidance Automation Toolkit
(?d)*.gpState

// ReSharper is a .NET coding add-in
(?d)_ReSharper*/
(?d)*.[Rr]e[Ss]harper
(?d)*.DotSettings.user

// Click-Once directory
(?d)publish/

// Publish Web Output
(?d)*.Publish.xml
(?d)*.pubxml
(?d)*.azurePubxml

// NuGet Packages Directory
//# TODO: If you have NuGet Package Restore enabled, uncomment the next line
(?d)packages/
//# TODO: If the tool you use requires repositories.config, also uncomment the next line
(?d)!packages/repositories.config

// Windows Azure Build Output
(?d)csx/
(?d)*.build.csdef

// Windows Store app package directory
(?d)AppPackages/

// Others
(?d)sql/
(?d)*.Cache
(?d)ClientBin/
(?d)[Ss]tyle[Cc]op.*
(?d)![Ss]tyle[Cc]op.targets
(?d)~$*
(?d)*~
(?d)*.dbmdl
(?d)*.[Pp]ublish.xml

(?d)*.publishsettings

// RIA/Silverlight projects
(?d)Generated_Code/

// Backup & report files from converting an old project file to a newer
// Visual Studio version. Backup files are not needed, because we have git ;-)
(?d)_UpgradeReport_Files/
(?d)Backup*/
(?d)UpgradeLog*.XML
(?d)UpgradeLog*.htm

// SQL Server files
(?d)App_Data/*.mdf
(?d)App_Data/*.ldf

// =========================
// Windows detritus
// =========================

// Windows image file caches
(?d)Thumbs.db
(?d)ehthumbs.db

// Folder config file
(?d)Desktop.ini

// Recycle Bin used on file shares
(?d)$RECYCLE.BIN/

// Mac desktop service store files
(?d).DS_Store

(?d)_NCrunch*
